/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var DOMEventMessageBus;

	DOMEventMessageBus = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var DOMEventMessageBus;

	  module.exports = DOMEventMessageBus = (function() {
	    function DOMEventMessageBus(arg) {
	      var receiveEvent, sendEvent;
	      this.DOMNode = arg.DOMNode, sendEvent = arg.sendEvent, receiveEvent = arg.receiveEvent, this.timeout = arg.timeout;
	      Object.bindAll(this);
	      this.timeout || (this.timeout = 1000);
	      this.lastMessageId = Date.now();
	      this.messagesPendingReceipt = {};
	      this.SEND_EVENT = sendEvent;
	      this.RECEIVE_EVENT = receiveEvent;
	      this.DOMNode.addEventListener(this.RECEIVE_EVENT, (function(_this) {
	        return function(event) {
	          return _this.receiveMessage(event.detail);
	        };
	      })(this));
	    }

	    DOMEventMessageBus.prototype.dispatchEvent = function(event, message) {
	      console.info('DISPATCH EVENT', event, message);
	      if (!this.DOMNode.dispatchEvent(new CustomEvent(event, {
	        detail: message
	      }))) {
	        debugger;
	      }
	      return this;
	    };

	    DOMEventMessageBus.prototype.sendMessage = function(type, payload) {
	      var message;
	      message = {
	        id: this.lastMessageId++,
	        type: type,
	        payload: payload
	      };
	      return new Promise((function(_this) {
	        return function(resolve, reject) {
	          var timeout;
	          _this.messagesPendingReceipt[message.id] = resolve;
	          timeout = function() {
	            console.log("did message " + message.id + " timeout?", _this.messagesPendingReceipt[message.id]);
	            if (!_this.messagesPendingReceipt[message.id]) {
	              return;
	            }
	            return reject({
	              error: 'timeout sending message to Torflix'
	            });
	          };
	          setTimeout(_this.timeout, timeout);
	          return _this.dispatchEvent(_this.SEND_EVENT, message);
	        };
	      })(this));
	    };

	    DOMEventMessageBus.prototype.receiveMessage = function(arg) {
	      var id, payload, resolve, type;
	      id = arg.id, type = arg.type, payload = arg.payload;
	      if (type === 'messageReceipt') {
	        resolve = this.messagesPendingReceipt[id];
	        delete this.messagesPendingReceipt[id];
	        return typeof resolve === "function" ? resolve() : void 0;
	      }
	    };

	    return DOMEventMessageBus;

	  })();

	}).call(this);


/***/ }
/******/ ]);